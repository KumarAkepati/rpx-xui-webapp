const express = require('express');
const db = require("./stubs/db.json");
const app = express();

// ------ [Start] Root API ------
// example: /
app.get('/', (req, res) => {
  res.status(400).send('{"errorMessage": "Bad request}"');
});

// example: /api
app.get('/api', (req, res) => {
  res.send(db);
});
// ------ [End] Root API ------

// ------ [Start] Search Users from the same organisation API ------
// example: /api/orgs
app.get('/api/orgs', (req, res) => {
  console.log('call /api/orgs');
  const orgs = db['organisation'];
  if (!orgs) return res.status(404).send('{"errorMessage": "Organisations are not found}"');
  res.send(orgs);
});

// example: /api/orgs/o111111/users
app.get('/api/orgs/:orgId/users', (req, res) => {
  console.log('call /api/orgs/' + req.params.orgId + '/users');
  const orgs = db['organisation'];
  const org = orgs.find(c => c.orgId === req.params.orgId);
  if (!org) return res.status(404).send('{"errorMessage": "Organisation is not found}"');
  const users = org['users'];
  if (!users)  return res.status(404).send('{"errorMessage": "Users is not found}"');
  return res.send(users);
});

// example: /api/orgs/o111111/users/u111111
app.get('/api/orgs/:orgId/users/:uid', (req, res) => {
  console.log('call /api/orgs/' + req.params.orgId + '/users/' + req.params.uid);
  const orgs = db['organisation'];
  const org = orgs.find(c => c.orgId === req.params.orgId);
  if (!org) return res.status(404).send('{"errorMessage": "Organisation is not found}"');
  const users = org['users'];
  const user = users.find(user => user.userId === req.params.uid);
  if (!user)  return res.status(404).send('{"errorMessage": "User is not found}"');
  return res.send(user);
});

// example 1: /api/orgs/o111111
// example 2: /api/orgs/o111111?q=search_text
app.get('/api/orgs/:orgId', (req, res) => {
  const search_text = req.query.q;
  console.log('call /api/orgs/' + req.params.orgId + '?q=' + search_text);
  const orgs = db['organisation'];
  const org = orgs.find(c => c.orgId === req.params.orgId);
  if (!org) return res.status(404).send('{"errorMessage": "Organisation is not found}"');
  if (search_text === undefined) {
    return res.send(org);
  } else{
    const users = org['users'];
    const user = users.filter(user => user.userId.toLowerCase().indexOf(search_text.toLowerCase()) > -1 ||
      user.firstName.toLowerCase().indexOf(search_text.toLowerCase()) > -1 ||
      user.surName.toLowerCase().indexOf(search_text.toLowerCase()) > -1 ||
      user.email.toLowerCase().indexOf(search_text.toLowerCase()) > -1);
    if (!user || user.length === 0)  return res.status(404).send('{"errorMessage": "User is not found}"');
    return res.send(user);
  }
});
// ------ [End] Search Users from the same organisation API ------

// ------ [Start] Search assigned users from the share case API ------
// example: /api/cases
app.get('/api/cases', (req, res) => {
  console.log('call /api/cases');
  const cases = db['caseAssignedUsers'];
  if (!cases) return res.status(404).send('{"errorMessage": "Cases are not found}"');
  res.send(cases);
});

// example: /api/cases/c111111
app.get('/api/cases/:caseId', (req, res) => {
  console.log('call /api/cases/' + req.params.caseId);
  const cases = db['caseAssignedUsers'];
  if (!cases) return res.status(404).send('{"errorMessage": "Cases are not found}"');
  const foundCase = cases.find(c => c.caseId === req.params.caseId);
  if (!foundCase) return res.status(404).send('{"errorMessage": "Case is not found}"');
  res.send(foundCase);
});
// ------ [End] Search assigned users from the share case API ------

app.listen(process.env.PORT || 3002, () => {
  console.log('Server listening on port 3002!')
})
