import { plainToClass } from 'class-transformer';
import * as express from 'express';
import { Application, Request, Response } from 'express';
import { SharedCase } from '../../src/cases/models/case-share/case-share.module';
import { OrganisationModule } from '../../src/cases/models/organisation/organisation.module';
import { UserDetails } from '../../src/cases/models/user-details/user-details.module';
import { DataBaseModule } from './models/data-base.module';
// @ts-ignore
import * as dbJson from './stubs/db.json';

export const app: Application = express();

// ------ [Start] Root API ------
// example: /
app.get('/', (req: Request, res: Response) => {
  res.status(400).send('{"errorMessage": "Bad request}"');
});

// example: /api
app.get('/db', (req: Request, res: Response) => {
  res.send(dbJson);
});
// ------ [End] Root API ------

// ------ [Start] Search Users from the same organisation API ------
// example: /api/orgs
app.get('/api/orgs', (req: Request, res: Response) => {
  console.log('call /api/orgs');
  const dbModule = plainToClass(DataBaseModule, dbJson);
  const orgs: OrganisationModule[] = dbModule.organisations;
  if (!orgs) {
    return res.status(404).send('{"errorMessage": "Organisations are not found}"');
  }
  res.send(orgs);
});

// example: /api/orgs/o111111/users
app.get('/api/orgs/:orgId/users', (req: Request, res: Response) => {
  console.log('call /api/orgs/' + req.params.orgId + '/users');
  const dbModule = plainToClass(DataBaseModule, dbJson);
  const orgs: OrganisationModule[] = dbModule.organisations;
  const org = orgs.find(c => c.orgId === req.params.orgId);
  if (!org) {
    return res.status(404).send('{"errorMessage": "Organisation is not found}"');
  }
  const users: UserDetails[] = org.users;
  if (!users) {
    return res.status(404).send('{"errorMessage": "Users is not found}"');
  }
  return res.send(users);
});

// example: /api/orgs/o111111/users/u111111
app.get('/api/orgs/:orgId/users/:uid', (req: Request, res: Response) => {
  console.log('call /api/orgs/' + req.params.orgId + '/users/' + req.params.uid);
  const dbModule = plainToClass(DataBaseModule, dbJson);
  const orgs: OrganisationModule[] = dbModule.organisations;
  const org = orgs.find(c => c.orgId === req.params.orgId);
  if (!org) {
    return res.status(404).send('{"errorMessage": "Organisation is not found}"');
  }
  const users: UserDetails[] = org.users;
  const user = users.find(u => u.idamId === req.params.uid);
  if (!user) {
    return res.status(404).send('{"errorMessage": "User is not found}"');
  }
  return res.send(user);
});

// example 1: /api/orgs/o111111
// example 2: /api/orgs/o111111?q=search_text
app.get('/api/orgs/:orgId', (req: Request, res: Response) => {
  const searchText = req.query.q;
  console.log('call /api/orgs/' + req.params.orgId + '?q=' + searchText);
  const dbModule = plainToClass(DataBaseModule, dbJson);
  const orgs: OrganisationModule[] = dbModule.organisations;
  const org = orgs.find(c => c.orgId === req.params.orgId);
  if (!org) {
    return res.status(404).send('{"errorMessage": "Organisation is not found}"');
  }
  if (searchText === undefined) {
    return res.send(org);
  } else {
    const users = org.users;
    const user = users.filter(u => u.idamId.toLowerCase().indexOf(searchText.toLowerCase()) > -1 ||
      u.firstName.toLowerCase().indexOf(searchText.toLowerCase()) > -1 ||
      u.lastName.toLowerCase().indexOf(searchText.toLowerCase()) > -1 ||
      u.email.toLowerCase().indexOf(searchText.toLowerCase()) > -1);
    if (!user || user.length === 0) {
      return res.status(404).send('{"errorMessage": "User is not found}"');
    }
    return res.send(user);
  }
});
// ------ [End] Search Users from the same organisation API ------

// ------ [Start] Search assigned users from the share case API ------
// example: /api/cases
app.get('/api/cases', (req: Request, res: Response) => {
  console.log('call /api/cases');
  const dbModule = plainToClass(DataBaseModule, dbJson);
  const cases: SharedCase[] = dbModule.sharedCases;
  if (!cases) {
    return res.status(404).send('{"errorMessage": "Cases are not found}"');
  }
  res.send(cases);
});

// example: /api/cases/c111111
app.get('/api/cases/:caseId', (req: Request, res: Response) => {
  console.log('call /api/cases/' + req.params.caseId);
  const dbModule = plainToClass(DataBaseModule, dbJson);
  const cases: SharedCase[] = dbModule.sharedCases;
  if (!cases) {
    return res.status(404).send('{"errorMessage": "Cases are not found}"');
  }
  const foundCase = cases.find(c => c.caseId === req.params.caseId);
  if (!foundCase) {
    return res.status(404).send('{"errorMessage": "Case is not found}"');
  }
  return res.send(foundCase);
});
// ------ [End] Search assigned users from the share case API ------

app.listen(process.env.PORT || 3002, () => {
  console.log('Server listening on port 3002!')
})
